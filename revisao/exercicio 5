public class Questao5 {

    static int comparacoes = 0;
    static int trocas = 0;

    public static void reset() {
        comparacoes = 0;
        trocas = 0;
    }

    public static void bubbleSort(int[] v) {
        reset();
        for (int i = 0; i < v.length - 1; i++)
            for (int j = 0; j < v.length - 1 - i; j++) {
                comparacoes++;
                if (v[j] > v[j + 1]) {
                    int temp = v[j];
                    v[j] = v[j + 1];
                    v[j + 1] = temp;
                    trocas++;
                }
            }
    }

    public static void insertionSort(int[] v) {
        reset();
        for (int i = 1; i < v.length; i++) {
            int chave = v[i];
            int j = i - 1;
            comparacoes++;
            while (j >= 0 && v[j] > chave) {
                v[j + 1] = v[j];
                j--;
                trocas++;
                if (j >= 0) comparacoes++;
            }
            v[j + 1] = chave;
        }
    }

    public static void selectionSort(int[] v) {
        reset();
        for (int i = 0; i < v.length - 1; i++) {
            int min = i;
            for (int j = i + 1; j < v.length; j++) {
                comparacoes++;
                if (v[j] < v[min]) min = j;
            }
            if (min != i) {
                int temp = v[i];
                v[i] = v[min];
                v[min] = temp;
                trocas++;
            }
        }
    }

    public static void qualMelhorOrdenacao(int[] original) {
        long t1, t2;

        int[] a = original.clone();
        t1 = System.nanoTime();
        bubbleSort(a);
        t2 = System.nanoTime();
        long tempoB = t2 - t1;
        int compB = comparacoes, trocB = trocas;

        int[] b = original.clone();
        t1 = System.nanoTime();
        insertionSort(b);
        t2 = System.nanoTime();
        long tempoI = t2 - t1;
        int compI = comparacoes, trocI = trocas;

        int[] c = original.clone();
        t1 = System.nanoTime();
        selectionSort(c);
        t2 = System.nanoTime();
        long tempoS = t2 - t1;
        int compS = comparacoes, trocS = trocas;

        System.out.println("Bubble    - T: " + tempoB + ", Comp: " + compB + ", Trocas: " + trocB);
        System.out.println("Insertion - T: " + tempoI + ", Comp: " + compI + ", Trocas: " + trocI);
        System.out.println("Selection - T: " + tempoS + ", Comp: " + compS + ", Trocas: " + trocS);

        if (tempoB <= tempoI && tempoB <= tempoS)
            System.out.println("Melhor: Bubble Sort");
        else if (tempoI <= tempoB && tempoI <= tempoS)
            System.out.println("Melhor: Insertion Sort");
        else
            System.out.println("Melhor: Selection Sort");
    }

    public static void main(String[] args) {
        int[] vetor = {5, 2, 9, 1, 6};
        qualMelhorOrdenacao(vetor);
    }
}
